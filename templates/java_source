package com.tkyaji.cordova;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

public class CDVCppBridge extends CordovaPlugin {

    static {
        System.loadLibrary("cordova-cpp-bridge-lib");
    }

/*NATIVE_METHODS*/

    private static Map<String, CppBridgeAction> actionRunnerMap = new HashMap<String, CppBridgeAction>() {
        {
/*METHODS*/
        }
    };

    public static double[] mapToDoubleArray(JSONArray array) {
        double[] result = new double[array.length()];
        for(int i = 0; i<array.length(); i++){
            try{
                result[i] = Double.parseDouble(array.getString(i));
            }catch(JSONException e){
                //TODO do something and not just swallow the exception
            }
        }
        return result;
    }

    public static JSONArray mapToJsonArray(double[][] result){
        JSONArray matrix = new JSONArray();
        try{
            for(int i = 0; i<result.length; i++){
                JSONArray array = new JSONArray();
                for(int j = 0; j<result[0].length; j++){
                    array.put(result[i][j]);
                }
                matrix.put(array);
            }
        }catch(JSONException e){
            //TODO do something and not just swallow the exception
        }

        return matrix;
    }

    @Override
    public boolean execute(String action, JSONArray data, CallbackContext callbackContext) throws JSONException {
        CppBridgeAction bridgeAction = actionRunnerMap.get(action);
        if (bridgeAction == null) {
            return false;
        }
        return bridgeAction.invoke(data, callbackContext);
    }


    private interface CppBridgeAction {
        boolean invoke(JSONArray data, CallbackContext callbackContext);
    }
}
